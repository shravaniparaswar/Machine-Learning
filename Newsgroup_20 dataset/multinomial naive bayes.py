from sklearn.datasets import fetch_20newsgroups

from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.naive_bayes import   MultinomialNB

from sklearn.pipeline import make_pipeline

import seaborn as sns

import matplotlib.pyplot as plt


data=fetch_20newsgroups()

#print(data)

print(data.target_names)

#print(data.head)

categories=['talk.religion.misc','soc.religion.christian' ,'sci.space','comp.graphics']
train=fetch_20newsgroups(subset='train',categories=categories)
test=fetch_20newsgroups(subset='test' ,categories=categories)

#print(type(train))

#print(train.data[5])

#################


model=make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(train.data , train.target)
label=model.predict(test.data)


from sklearn.metrics import confusion_matrix



mat=confusion_matrix(test.target,label)

sns.heatmap(mat.T ,square=True ,annot=True ,fmt='d' ,cbar=True,
            xticklabels=train.target_names , yticklabels=train.target_names)

plt.xlabel('true label')
plt.ylabel('predicted labels')

plt.show()


def predict_category(s , train=train ,model=model):
    pred=model.predict([s])
    return train.target_names[pred[0]]

print(predict_category('Sending a payload to ISS'))

print(predict_category('ISLAM VS ATHENIA'))

print(predict_category('determining screen resolution'))



#in multinomial bayes feature vector reoresents frequency of no of occurance of

#a term with which certain events have been generated by a multinomial distribution

#if

'''
Make a pipeline for numeric data which is divided in many clasees
For this we use TF-IDF vectorizer and create pipeline that atttaches it 
to a multinomial naive bayes !
'''

'''
ANSWERS ! 
OUTPUT ! 

sci.space
soc.religion.christian
comp.graphics
'''

